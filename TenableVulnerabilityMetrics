<#

Author: Curtis Powers
Intent: Migrate all metrics into one script and put into excel for one place
Changes: 

#>

<#
******************

  CREATE THE FUNCTIONS FOR OBTAINING THE PATCHING METRICS

******************
#>

function Get-ManuallyPatchedServers {

  $GroupPath = ""

  $ManualPatchGroup = [ADSI]"LDAP://$GroupPath"
  $ManualPatchGroups = $ManualPatchGroup.member

  $ManuallyPatchedServers = @()

  $Searcher = [ADSISearcher]"(objectcategory=computer)"
  $Searcher.searchroot = "LDAP://OU=Domain Controllers,DC=example,DC=domain,DC=coml"

  $ManuallyPatchedServers += $Searcher.findall().properties.name

  foreach($Group in $ManualPatchGroups){

    $ManuallyPatchedServers += ([ADSI]"LDAP://$Group").member | %{$_.split("=,")[1]}

  }

  $ManuallyPatchedServers

}

function Get-PatchingMetrics ($data_mitigated, $data_observed){

  <#
  -----------------------
    DEFINE VARIABLES TO EXCLUDE NON ITOPS ASSETS
  -----------------------
  #>
  $strReferenceFilePath = ""

  $regxSomeWorkstations = "[0-9]{5,7}-[A-Za-z]{3}-[0-9]{2}"
  $regxMoreWorkstations = "[A-Za-z]{2,4}[0-9]{5,9}"
  $regxDifferentWorkstations = "[0-9]{5,7}-[0-9]{2}"
  $regxNonPersistentVdi = "V[A-Za-z]W0v.*"
  $regxPersistentVdi = "V[A-Za-z]W-.*"
  $regxIpAddress = "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
  $regxBaseWorkstations = "([0-9]{5,7}-[A-Za-z]{3}-[0-9]{2}|[A-Za-z]{2,4}[0-9]{5,9}|[0-9]{5,7}-[0-9]{2}|V[A-Za-z]W0v[0-9]{2}.*|V[A-Za-z]W-.*)"

  $regxWindows = "(Windows|Windows:.*)"
  $regxUnix = "(Red Hat.*|Solaris.*|Database)"

  $regxRepositoryNames = "(.*PRD.*|v:DCPAS)"

  $strNonUnixPluginNames = "Microsoft SQL Server Unsupported Version Detection"
  $strNonWindowsPluginNames = "*McAfee*"

  $arrManuallyPatchedServers = Get-ManuallyPatchedServers

  $csvServers = import-csv $strReferenceFilePath\Servers.csv
  $arrNonItopsWeblogicFindings = $csvServers.where{$_.OracleWeblogic -eq "Yes"}.Server
  $arrExcludedServers = $csvServers.where{$_.Responsibility -ne "ITOps"}.Server

  $arrCloudServers = $csvServers.where{$_.Cloud -eq 'Cloud'}.Server


  <#
  ----------------------
    DATA CLEANUP
  ----------------------
  #>
  #combine both variables containing the ACAS data into one variable
  $acas_data = ($data_mitigated | select *, @{n="Last Observed";e={""}}) + ($data_observed | select *, @{n="Mitigated On";e={""}})


  <#
  ---------------------
    ADDITION OF COLUMNS THAT DRIVE THE EXCEL SPREADSHEET
  ---------------------
  #>
  #Create the following Columns: PPDate, MODate, LODate, IAVM
  $acas_data = $acas_data | select *, `
  @{n="PPDate";e={[datetime]::parseexact($($_."Plugin Publication Date" -replace ".{4}$"), "MMM d, yyyy HH:mm:ss", $null)}}, `
  @{n="MODate";e={[datetime]::parseexact($($_."Mitigated On" -replace ".{4}$"), "MMM d, yyyy HH:mm:ss", $null)}}, `
  @{n="LODate";e={[datetime]::parseexact($($_."Last Observed" -replace ".{4}$"), "MMM d, yyyy HH:mm:ss", $null)}}, `
  @{n="IAVM";e={$iavm_match = select-string $_.plugin $strReferenceFilePath\iavm-plugin.txt | select -last 1
    if($iavm_match){$iavm_match.tostring().split(":")[2]}
    else{"Non-IAVM"}	
  }}

  #Create the following Columns: Name
  $acas_data = $acas_data | select *, `
  @{n="Name";e={
    if($_."NetBIOS Name"){if($_."NetBIOS Name" -match ".*\\.*\..*"){$_."NetBIOS Name".split("\.")[1]}elseif($_."NetBIOS Name" -match ".*\\.*"){$_."NetBIOS Name".split("\")[1]}else{$_."NetBIOS Name"}}
    elseif($_."DNS Name"){if($_."DNS Name" -match ".*\..*"){$_."DNS Name".split(".")[0]}else{$_."DNS Name"}}
    else{
      $hostname = ""
      $IP = $_."IP Address"
      If(!$hostname){
        $hostname = $csvServers.where{$_.IPAddress -eq $IP}.Server
      }
      If(!$hostname){
        $hostname = $IP
      }
      $hostname
    }
  }}


  #Create the following Columns: OperatingSystem, Responsibility, ClientType
  $acas_data = $acas_data | select *, `
  @{n="OperatingSystem";e={
    if($_.Family -match $regxWindows){
      "Windows"
    }elseif(($_.Family -match $regxUnix -and $_.Name -notmatch  $regxWorkstations -and $_."Plugin Name" -ne $strNonUnixPluginNames) -or ($_."Plugin Name" -like "*Oracle Weblogic*" -and $_.Name -notmatch $regxWorkstations)){
      "Unix"
    }else{
      "N/A"
    }
  }}, `
  @{n="Responsibility";e={
    if($_."Plugin Name" -like "*Oracle Weblogic*" -and $_.Name -in $arrNonItopsWeblogicFindings){"All"}

    elseif($_.Name -notmatch "($regxDbidsWorkstations|$regxRapidsWorkstations)" -and $_."Plugin Name" -notlike $strNonWindowsPluginNames -and $_.Name -notin $arrExcludedServers -and $_.Repository -match $regxItopsRepository){"ITOps"}

    elseif($_.Name -notmatch "($regxDbidsWorkstations|$regxRapidsWorkstations)" -and $_."Plugin Name" -like "*Oracle Weblogic*" -and $_.Name -notin $arrExcludedServers -and $_.Repository -match $regxItopsRepository){"ITOps"}

    else{"All"}
  }}, `
  @{n="ClientType";e={
    Switch -regex ($_.Name){
      $regxNonPersistentVdi {"Non-Persistent VDI"}
      $regxPersistentVdi {"Persistent VDI"}
      $regxDsWorkstations {"DS Workstation"}
      $regxDbidsWorkstations {"DBIDS Workstation"}
      $regxRapidsWorkstations {"Rapids Workstation"}
      $regxIpAddress {"Unknown (IPAddress)"}
      "^$" {"No Value"}
      Default {"Server"}
    }
  }}


  #add the following columns: Due Date
  $acas_data = $acas_data | select *, `
  @{n="Due Date";e={
    #if the line is an IAVM
    if($_.IAVM -ne "Non-IAVM"){
      $iavm = $_.IAVM
      $due_date = select-string \b$iavm\b $strReferenceFilePath\iavm-duedates.csv | select -first 1
      if($due_date){ 
          $due_date = $due_date.tostring().split(",")[-1] #select the actual due date (the last column in the csv)
          If($due_date -ne ""){
            [datetime]::parseexact($due_date, "M/d/yyyy", $null)
          }else{ 
            $_."PPDate".adddays(21) #add 21 days to the plugin released date
          }
      }else{
        $_."PPDate".adddays(21) #add 21 days to the plugin released date
      }
    }elseif($_.IAVM -eq "Non-IAVM" -and $_.OperatingSystem -eq "Windows"){ 
      If($_.Severity -eq "Critical"){ 
        $_."PPDate".adddays(7) 
      }else{ #for any other severity 
        $_."PPDate".adddays(21) 
      }
    }elseif($_.IAVM -eq "Non-IAVM" -and $_.OperatingSystem -eq "Unix"){ 
      if($_.Severity -eq "Critical"){ 
        $_."PPDate".adddays(7) 
      }elseif($_.Severity -eq "High"){ 
        $_."PPDate".adddays(21) 
      }elseif($_.Severity -eq "Medium"){
        $_."PPDate".adddays(60) 
      }elseif($_.Severity -eq "Low"){
        $_."PPDate".adddays(90) 
      }
    }elseif($_.IAVM -eq "Non-IAVM" -and $_.OperatingSystem -eq "N/A"){ 
      if($_.Severity -eq "Critical"){ 
        $_."PPDate".adddays(7) 
      }elseif($_.Severity -eq "High"){ 
        $_."PPDate".adddays(21) 
      }elseif($_.Severity -eq "Medium"){ 
        $_."PPDate".adddays(60) 
      }elseif($_.Severity -eq "Low"){ 
        $_."PPDate".adddays(90) 
      }
    }
  }}

  #add the following Columns: MonthsOld, Timeliness, DueMY, CalculatedMY, Plugin-DueDate, PatchingType, LastObserved-Name
  $acas_data = $acas_data | select *, `
  @{n="MonthsOld";e={
    [int32](((get-date) - ($_."Due Date")).days / 30) #subtract the due date from the current date and divide the number of days by 30
  }}, `
  @{n="Timeliness";e={
    #if last observed is not null, then it is not deployed, if the Mitigated On date is on or before the due date, it is on time, and if the Mitigated On date is after the Due Date, it is late
    if($_."Last Observed"){"Not Deployed"}elseif($_.MODate.Date -le $_."Due Date"){"On Time"}elseif($_.MODate.Date -gt $_."Due Date"){"Late"} 
  }}, `
  @{n="DueMY";e={"$($_."Due Date".year)/$($_."Due Date".Month)"}}, `
  @{n="CalculatedMY";e={get-date -format "yyyy/MM"}}, ` #select the month & Year for when the metrics were calculated
  @{n="Plugin-DueDate";e={"$($_."Due Date".tostring().split(" ")[0])-$($_."Plugin Name")"}}, ` #Join the plugin name and the due date
  @{n="PatchingType";e={
    if($_.ClientType -ne "Server"){"Automatic"}
    else{
      If($_.Name -in $arrManuallyPatchedServers){
        "Manual"
      }else{
        "Automatic"
      }
    }
  }}, ` #For servers that are patched manually
  @{n="DateLastSeen-Name";e={
    If($_."LODate"){
      If($_.Name){
        "$($_.LODate.tostring().split(" ")[0])-$($_.Name)"
      }else{
        "$($_.LODate.tostring().split(" ")[0])-$($_."IP Address")"
      }
    }elseif($_."MODate"){
      If($_.Name){
        "$($_.MODate.tostring().split(" ")[0])-$($_.Name)"
      }else{
        "$($_.MODate.tostring().split(" ")[0])-$($_."IP Address")"
      }

    }
  }}<#, ` #join the last observed/Mitigated On and name columns together
  @{n="Location";e={
    if($_.Name -in $arrCloudServers){
      "Cloud"
    }else{
      "OnPrem"
    }}
  }} #to identify if the server/workstation is in the cloud or on prem#>

  <#
  ----------------------
    OUTPUT OF THE CLEANED DATA
  ----------------------
  #>
  $acas_data

}

<#
*******************

  MAIN PROCESSING FOR THE SCRIPT

*******************
#>

$month = get-date -format "yyyy-MM"
$data_mitigated = import-csv "H:\Metrics\Exports\Production\$month - All - Mitigated.csv"
#$data_mitigated += import-csv "H:\Metrics\Exports\Production\$month - OCI - Mitigated.csv"
$data_observed = import-csv "H:\Metrics\Exports\Production\$month - All - observed.csv"
#$data_observed += import-csv "H:\Metrics\Exports\Production\$month - OCI - observed.csv"

$acas_results = Get-PatchingMetrics -data_mitigated $data_mitigated -data_observed $data_observed 


#open and setup Excel
$xl = new-object -comobject Excel.Application
$xl.visible = $true
$workbook = $xl.workbooks.open("H:\metrics\Unix_Windows Patching Metrics - v5.0.xlsx")
$xlworksheet = $workbook.sheets.item("PatchingData")
$xlworksheet.activate()

#select the last row
$lastrow = $xlworksheet.cells.range("A1048576").end(-4162).row
$nextrow = $lastrow + 1
$range = $xlworksheet.Range("A$nextRow")

#copy all the acas data to the clipboard
$acas_results | convertto-csv -delimiter "`t" -notypeinformation | select -skip 1 | clip

#paste the results into the workbook
$xlworksheet.paste($range)

#sort by MODate and remove duplicates based on IP Address and Plugin
$empty_var = [system.type]::Missing
$sort_col = $xlworksheet.range("O1")
$xlworksheet.usedrange.sort($sort_col,2,$empty_var,$empty_var,$empty_var,$empty_var,$empty_var,1)

$xlworksheet.usedrange.removeDuplicates((1,5))

#set row height to 15
$xlworksheet.rows.rowheight = 15


#set the activated worksheet to aged patches and VPH historical
$xlworksheet = $workbook.sheets.item("OpenVulnerabilities")
$xlworksheet.activate()

#fill not deployed data into separate sheet for historical VPH and aged patches 
$acas_results.where{$_.Timeliness -eq "Not Deployed"} | convertto-csv -delimiter "`t" -notypeinformation | select -skip 1 | clip

$lastrow = $xlworksheet.cells.range("A1048576").end(-4162).row
$nextrow = $lastrow + 1
$range = $xlworksheet.range("A$nextRow")

$xlworksheet.paste($range)

#sort by LOdate and remove duplicates based on IP Address, plugin, and CaclulatedMY
$empty_var = [system.type]::Missing
$sort_col = $xlworksheet.range("P1") #column with LODate in it
$xlworksheet.usedrange.sort($sort_col,2,$empty_var,$empty_var,$empty_var,$empty_var,$empty_var,1)

$xlworksheet.usedrange.removeDuplicates((1,5,26)) #1 is the plugin, 5 is the IP address and 26 is the CalculatedMY

#set the row height to 15
$xlworksheet.rows.rowheight = 15

#save the workbook

$workbook.save()

$workbook.close()
$xl.quit()
